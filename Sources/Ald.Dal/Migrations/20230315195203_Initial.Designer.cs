// <auto-generated />
using System;
using Ald.Dal.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ald.Dal.Migrations
{
    [DbContext(typeof(CollegeContext))]
    [Migration("20230315195203_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ald.Dal.Entities.AttestationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("AttestationTypes");
                });

            modelBuilder.Entity("Ald.Dal.Entities.Cycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CycleTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Index")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CycleTypeId");

                    b.ToTable("Cycles");
                });

            modelBuilder.Entity("Ald.Dal.Entities.CycleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Index")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CycleTypes");
                });

            modelBuilder.Entity("Ald.Dal.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Ald.Dal.Entities.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<string>("Index")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CycleId");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("Ald.Dal.Entities.EducationPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttestationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Course")
                        .HasColumnType("int");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<int>("EducationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("WeeksCount")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttestationTypeId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("EducationTypeId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("EducationPlans");
                });

            modelBuilder.Entity("Ald.Dal.Entities.EducationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("EducationTypes");
                });

            modelBuilder.Entity("Ald.Dal.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Course")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndEducationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsGraduate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartEducationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Ald.Dal.Entities.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("EducationMonths")
                        .HasColumnType("int");

                    b.Property<int>("EducationYears")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("Ald.Dal.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("EducationPlanTeacher", b =>
                {
                    b.Property<int>("EducationPlansId")
                        .HasColumnType("int");

                    b.Property<int>("TeachersId")
                        .HasColumnType("int");

                    b.HasKey("EducationPlansId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("EducationPlanTeacher");
                });

            modelBuilder.Entity("Ald.Dal.Entities.Cycle", b =>
                {
                    b.HasOne("Ald.Dal.Entities.CycleType", "CycleType")
                        .WithMany("Cycles")
                        .HasForeignKey("CycleTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CycleType");
                });

            modelBuilder.Entity("Ald.Dal.Entities.Discipline", b =>
                {
                    b.HasOne("Ald.Dal.Entities.Cycle", "Cycle")
                        .WithMany("Disciplines")
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cycle");
                });

            modelBuilder.Entity("Ald.Dal.Entities.EducationPlan", b =>
                {
                    b.HasOne("Ald.Dal.Entities.AttestationType", "AttestationType")
                        .WithMany("EducationPlans")
                        .HasForeignKey("AttestationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ald.Dal.Entities.Discipline", "Discipline")
                        .WithMany("EducationPlans")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ald.Dal.Entities.EducationType", "EducationType")
                        .WithMany("EducationPlans")
                        .HasForeignKey("EducationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ald.Dal.Entities.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttestationType");

                    b.Navigation("Discipline");

                    b.Navigation("EducationType");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Ald.Dal.Entities.Group", b =>
                {
                    b.HasOne("Ald.Dal.Entities.Specialization", "Specialization")
                        .WithMany("Groups")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Ald.Dal.Entities.Specialization", b =>
                {
                    b.HasOne("Ald.Dal.Entities.Department", "Department")
                        .WithMany("Specializations")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Ald.Dal.Entities.Teacher", b =>
                {
                    b.HasOne("Ald.Dal.Entities.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EducationPlanTeacher", b =>
                {
                    b.HasOne("Ald.Dal.Entities.EducationPlan", null)
                        .WithMany()
                        .HasForeignKey("EducationPlansId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ald.Dal.Entities.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Ald.Dal.Entities.AttestationType", b =>
                {
                    b.Navigation("EducationPlans");
                });

            modelBuilder.Entity("Ald.Dal.Entities.Cycle", b =>
                {
                    b.Navigation("Disciplines");
                });

            modelBuilder.Entity("Ald.Dal.Entities.CycleType", b =>
                {
                    b.Navigation("Cycles");
                });

            modelBuilder.Entity("Ald.Dal.Entities.Department", b =>
                {
                    b.Navigation("Specializations");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Ald.Dal.Entities.Discipline", b =>
                {
                    b.Navigation("EducationPlans");
                });

            modelBuilder.Entity("Ald.Dal.Entities.EducationType", b =>
                {
                    b.Navigation("EducationPlans");
                });

            modelBuilder.Entity("Ald.Dal.Entities.Specialization", b =>
                {
                    b.Navigation("Groups");
                });
#pragma warning restore 612, 618
        }
    }
}
